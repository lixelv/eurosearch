
import streamlit as st
import sqlite3
import pandas as pd

def make_tup_lis(lis):
    lis = list(lis)
    for i in range(len(lis)):
        lis[i] = list(lis[i])
    return lis

def make_bool(lis):
    for i in range(len(lis)):
        for i_ in range(len(lis[i])):
            lis[i][i_] = bool(lis[i][i_]) if i_ >= 2 else lis[i][i_]
    return lis

if 'session_created'  in st.session_state:
    st.set_page_config(
        page_title="–ï–≤—Ä–æ–ø–æ–∏—Å–∫",
        page_icon="üíæ",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
    st.session_state['session_created'] = True

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
md = ''
conn = sqlite3.connect('data.db')
cursor = conn.cursor()
user_input = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")

hide_streamlit_style = """
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    </style>
    """
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

if user_input:
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞
    cursor.execute("SELECT * FROM data WHERE LOWER(name) LIKE '%' || LOWER(?) || '%'", (user_input,))
else:
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–ª –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute("SELECT * FROM data")

results = make_bool(make_tup_lis(cursor.fetchall()))

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ cursor.description
column_names = [desc[0] for desc in cursor.description[:2]] + ['–ö–ª–∞–ø–∞–Ω', '–†–∞—Å–ø—ã–ª–∏—Ç–µ–ª—å', '–°—Ç–∞–∫–∞–Ω', '–ü—Ä—É–∂–∏–Ω–∞', '–ú–µ–¥–Ω–æ–µ –∫–æ–ª—å—Ü–æ']

# –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö –≤ –≤–∏–¥–µ DataFrame
if len(results) <= 5 and results:
    for i in results:
        df = pd.DataFrame([i], columns=column_names)
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ any() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ True (—Ç.–µ. –∑–Ω–∞—á–µ–Ω–∏–µ 0) –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
        zero_rows = df.columns[(df == False).any()].tolist()
        md += f'### –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—á–∞—Å—Ç—å —É {i[1].split(" ")[-1]}.\n' if zero_rows else ''
        # –í—ã–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫
        for row in zero_rows:
             md += f'- <font size=6 color="#FF0000"><b>{row}</b></font>\n'
        # st.dataframe(df, hide_index=True, use_container_width=True)

    st.markdown(md if md else "# –§–æ—Ä—Å—É–Ω–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Å–æ—Å—Ç–∞–≤–µ!", unsafe_allow_html=True)
elif results:
    df = pd.DataFrame(results, columns=column_names)

    st.dataframe(df, hide_index=True, use_container_width=True)
else:
    st.markdown("# –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
